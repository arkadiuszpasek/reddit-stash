{"version":3,"sources":["common/BorderAnimation.tsx","common/CenterDiv.tsx","utils/css.ts","styles/styleguide.ts","components/NavigationEntry.tsx","config.ts","components/icons/HoverIcon.tsx","actions/types/index.ts","common/Shape.tsx","actions/styleActions.ts","services/LocalStorageService.ts","services/logger.ts","services/api/ApiTranslator.ts","services/api/ApiClient.ts","services/api/types.ts","actions/tweetActions.ts","containers/NavigationList.tsx","reducers/styleReducer.ts","reducers/tweetReducer.ts","reducers/index.ts","common/Buttons.tsx","components/dates/DashboardDateField.tsx","components/dates/DashboardDatePicker.tsx","components/reddit/Post.tsx","components/reddit/PostList.tsx","components/reddit/PostPreview.tsx","containers/Dashboard.tsx","containers/About.tsx","components/icons/Reddit.tsx","containers/Home.tsx","containers/Settings.tsx","components/reddit/PostAnalysis.tsx","index.tsx"],"names":["HoverBorder","styled","div","t","theme","colorP1","transitionParams","CenterDiv","hexToRgbString","hex","result","exec","parseInt","hexToRgb","join","parseToRgb","object","Object","fromEntries","entries","filter","startsWith","map","darkColors","colorBG0","colorBG1","colorBG2","colorBG3","colorP2","colorGray0","colorGray1","colorText","colorTextN","shadow","lightColors","darkColorsRGB","lightColorsRGB","distances","defaultRadius","m1","m2","m3","m4","m5","M1","M2","M3","styles","transitionParams1","fontN1","fontN2","fontN3","fontN4","fontN5","fontN6","fontN7","fontN8","fontH1","fontH2","fontH3","fontH4","fontH5","darkTheme","lightTheme","NavEntryDiv","Text","span","NavigationEntry","text","icon","rest","Icon","config","Hover","colorP1RGB","HoverIcon","ActionType","size","fontSize","Diamond","AppAction","type","this","payload","action","ToggleThemeAction","LocalStorageService","key","i","localStorage","getItem","JSON","parse","value","setItem","stringify","logger","console","log","debug","ApiTranslator","r","id","redditId","title","author","subreddit","body","undefined","numComments","score","created","moment","color","Math","random","toString","padStart","sentiment","category","ApiClient","translator","maybeSaved","getValue","baseUrl","url","port","page","subredditPage","authorPage","get","posts","p","post","error","labels","fetch","mode","response","json","instance","apiClient","getInstance","LoadTweetsAction","params","dispatch","a","getPosts","SetLowerDateBound","date","SetUpperDateBound","MenuContainer","MenuIcon","Container","colorBG0RGB","LinksContainer","Seperator","BottomIcons","ThemeTypes","NavigationListState","useState","isOpen","setIsOpen","toggleOpen","mapDispatchToProps","toggleTheme","create","connect","Drawer","anchor","open","onClose","classes","paper","onClick","to","href","target","rel","initialState","themeType","Dark","getThemeUpdates","state","Light","lowerDateBound","upperDateBound","rootReducer","combineReducers","style","isActionOfType","update","saveValue","tweets","startOf","CallToActionBtn","CallToActionOutlinedBtn","DateFieldDiv","DateField","props","placeholder","filtered","withPlaceholder","Component","DashboardDatePicker","textComponent","onChange","utils","DateMomentUtils","DatePicker","disableFuture","variant","TextFieldComponent","format","Flex","IconContainer","Content","MetaText","ContentText","ReadMoreBtn","Post","index","Grow","appear","in","timeout","substring","filteredLower","isSameOrBefore","isSameOrAfter","onPostPicked","ImageSection","TitleSection","ImageSectionText","ContinueSection","ContinueAction","InfoContainer","ContentBody","ColumnContainer","FiltersContainer","ListColumn","PreviewColumn","FilterElement","SearchBtn","PageNav","setLowerBound","setUpperBound","load","lowerBound","upperBound","currentPost","setCurrentPost","setPage","inputUsername","setInputUsername","inputSubreddit","setInputSubreddit","useEffect","DateFieldHOC","TextField","e","label","About","src","Overlay","BannerContainer","Actions","TextTitle","TestDescribtion","GetStartedActions","ContentContainer","CardsContainer","Card","CardTitle","CardDescribtion","Home","Reddit","InputsContainer","InputDiv","Input","input","Settings","urlInput","setUrlInput","portInput","setPortInput","s","setBaseUrl","GoBackContainer","AnalysisSpan","routeId","useParams","find","setLabels","getLabels","then","store","createStore","applyMiddleware","thunk","Global","createGlobalStyle","colorBG1RGB","Background","loadTweets","Main","basename","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a37d00b.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const HoverBorder = styled.div`\r\n  &:after {\r\n    content: \"\";\r\n    width: 0;\r\n    height: 1px;\r\n    margin: 1px;\r\n    display: block;\r\n    background-color: ${t => t.theme.colorP1};\r\n    transition: width ${t => t.theme.transitionParams};\r\n\r\n  }\r\n  &:hover:after {\r\n    width: 100%;\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const CenterDiv = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n","import { ColorsRGB } from '../styles/styleguide';\r\n\r\nexport function hexToRgb(hex: string) {\r\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return result ? [\r\n    parseInt(result[1], 16),\r\n    parseInt(result[2], 16),\r\n    parseInt(result[3], 16)\r\n  ] : [255, 255, 255];\r\n}\r\n\r\nexport function hexToRgbString(hex: string) {\r\n  return hexToRgb(hex).join(',');\r\n}\r\n\r\nexport function parseToRgb(object: { [key: string]: string }): ColorsRGB {\r\n  return Object.fromEntries(Object.entries(object)\r\n    .filter(([key]) => (key as string).startsWith('color'))\r\n    .map(([key, value]) => {\r\n      return [key + 'RGB', hexToRgbString(value as string)];\r\n    })) as ColorsRGB;\r\n}\r\n\r\n// export function defaultShadow({ theme }: TTP) {\r\n//   return `-webkit-box-shadow: 10px 10px 10px 0px rgba(${theme.color5RGB},0.6);\r\n//   -moz-box-shadow: 10px 10px 10px 0px rgba(${theme.color5RGB},0.6);\r\n//   box-shadow: 10px 10px 10px 0px rgba(${theme.color5RGB},0.6);`;\r\n// }\r\n// export function smallShadow({ theme }: TTP) {\r\n//   return `-webkit-box-shadow: 2px 2px 2px 0px rgba(${theme.color5RGB},0.6);\r\n//   -moz-box-shadow: 2px 2px 2px 0px rgba(${theme.color5RGB},0.6);\r\n//   box-shadow: 2px 2px 2px 0px rgba(${theme.color5RGB},0.6);`;\r\n// }\r\n\r\nexport function randomColor() {\r\n  // tslint:disable-next-line:no-bitwise\r\n  return '#' + (Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0');\r\n}\r\n","import { parseToRgb } from '../utils/css';\r\n\r\nconst darkColors = {\r\n  colorBG0: '#121212',\r\n  colorBG1: '#181818',\r\n  colorBG2: '#242424',\r\n  colorBG3: '#363636',\r\n  colorP1: '#B15CE6',\r\n  colorP2: '#CDE650',\r\n  colorGray0: '#363636',\r\n  colorGray1: '#3f3f3f',\r\n  colorText: '#f3f3f3',\r\n  colorTextN: '#121212',\r\n  shadow: 'none',\r\n};\r\n\r\nconst lightColors = {\r\n  colorBG0: '#f3f3f3',\r\n  colorBG1: '#f3f3f3',\r\n  colorBG2: '#f3f3f3',\r\n  colorBG3: '#d2d2d2',\r\n  colorP1: '#6E00B3',\r\n  colorP2: '#ADCC14',\r\n  colorGray0: '#363636',\r\n  colorGray1: '#3f3f3f',\r\n  colorText: '#121212',\r\n  colorTextN: '#f3f3f3',\r\n  shadow: `-webkit-box-shadow: 4px 4px 8px 1px rgba(18,18,18,0.4);\r\n  -moz-box-shadow: 4px 4px 8px 1px rgba(18,18,18,0.4);\r\n  box-shadow: 4px 4px 8px 1px rgba(18,18,18,0.4);`\r\n};\r\n\r\nexport const darkColorsRGB = parseToRgb(darkColors);\r\n\r\nexport const lightColorsRGB = parseToRgb(lightColors);\r\n\r\nconst distances = {\r\n  defaultRadius: '4px',\r\n\r\n  m1: '5px',\r\n  m2: '10px',\r\n  m3: '15px',\r\n  m4: '20px',\r\n  m5: '25px',\r\n  M1: '50px',\r\n  M2: '75px',\r\n  M3: '100px',\r\n};\r\n\r\nconst params = {\r\n  transitionParams: '280ms ease-out',\r\n  transitionParams1: '140ms ease-out',\r\n};\r\n\r\nconst fonts = {\r\n  fontN1: '200 12px Roboto',\r\n  fontN2: '200 14px Roboto',\r\n  fontN3: '200 16px Roboto',\r\n  fontN4: '200 18px Roboto',\r\n  fontN5: '200 20px Roboto',\r\n  fontN6: '200 24px Roboto',\r\n  fontN7: '200 28px Roboto',\r\n  fontN8: '200 32px Roboto',\r\n\r\n  fontH1: '200 72px Roboto',\r\n  fontH2: '200 56px Roboto',\r\n  fontH3: '200 48px Roboto',\r\n  fontH4: '200 42px Roboto',\r\n  fontH5: '200 36px Roboto',\r\n};\r\n\r\nexport const styles = {\r\n  ...distances,\r\n  ...distances,\r\n  ...params,\r\n  ...fonts,\r\n};\r\n\r\nexport const darkTheme = {\r\n  ...styles,\r\n  ...darkColors,\r\n  ...darkColorsRGB,\r\n};\r\n\r\nexport const lightTheme = {\r\n  ...styles,\r\n  ...lightColors,\r\n  ...lightColorsRGB,\r\n};\r\n\r\nexport type ColorsRGB = {\r\n  colorBG0RGB: string,\r\n  colorBG1RGB: string,\r\n  colorBG2RGB: string,\r\n  colorBG3RGB: string,\r\n  colorP1RGB: string,\r\n  colorP2RGB: string,\r\n  colorGray0RGB: string,\r\n  colorGray1RGB: string,\r\n};\r\n\r\nexport type Theme = typeof lightTheme;\r\n\r\nexport const appearTimeout = 750;\r\n","import { Icon } from '@material-ui/core';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { HoverBorder } from '../common/BorderAnimation';\r\nimport { CenterDiv } from '../common/CenterDiv';\r\nimport { styles } from '../styles/styleguide';\r\n\r\nconst NavEntryDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 42px;\r\n  border-radius: ${t => t.theme.defaultRadius};\r\n  transition: all ${t => t.theme.transitionParams};\r\n  font: ${t => t.theme.fontN5};\r\n  cursor: pointer;\r\n  margin-left: ${t => t.theme.m2};\r\n\r\n  &:hover {\r\n    color: ${t => t.theme.colorP1};\r\n    margin-left: ${styles.m3};\r\n  }\r\n`;\r\n\r\nconst Text = styled.span`\r\n  margin-left: ${styles.m2};\r\n`;\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\r\n  text: string;\r\n  icon: string;\r\n}\r\nfunction NavigationEntry({ text, icon, ...rest }: Props) {\r\n  return (\r\n    <HoverBorder>\r\n      <NavEntryDiv {...rest}>\r\n        <CenterDiv>\r\n          <Icon>{icon}</Icon>\r\n          <Text>{text}</Text>\r\n        </CenterDiv>\r\n      </NavEntryDiv>\r\n    </HoverBorder>\r\n  );\r\n}\r\n\r\nexport default NavigationEntry;\r\n","export const config = {\r\n  documentationURL: 'https://github.com/bohatiuk/twitter-stash',\r\n  subredditsNumber: 500,\r\n};\r\n","import { Icon } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\nimport React from 'react';\r\n\r\nconst Hover = styled.div`\r\n  transition: color ${t => t.theme.transitionParams};\r\n  cursor: pointer;\r\n  color: ${t => `rgba(${t.theme.colorP1RGB}, 0.7)`};\r\n  &:hover {\r\n    color: ${t => t.theme.colorP1};\r\n  }\r\n`;\r\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\r\n  icon: string;\r\n  size?: 'large' | 'small';\r\n}\r\nfunction HoverIcon({ icon, size, ...rest }: Props) {\r\n  return (\r\n    <Hover {...rest}>\r\n      <Icon fontSize={size}>{icon}</Icon>\r\n    </Hover>\r\n  );\r\n}\r\n\r\nexport default HoverIcon;\r\n","import { AppThunk } from '..';\r\n\r\nexport enum ActionType {\r\n  StyleChangeTheme = 'StyleChangeTheme',\r\n\r\n  TweetLoad = 'TweetLoad',\r\n  TweetSetLowerBound = 'TweetSetLowerBound',\r\n  TweetSetUpperBound = 'TweetSetUpperBound',\r\n}\r\n\r\nexport interface TAction {\r\n  type: string;\r\n  payload?: any;\r\n}\r\nexport abstract class AppAction {\r\n  public static type: string;\r\n\r\n  static create(t?: any): TAction | AppThunk {\r\n    return {\r\n      type: this.type,\r\n      payload: t\r\n    };\r\n  }\r\n\r\n  static isActionOfType(action: TAction): action is TAction {\r\n    return this.type === action.type;\r\n  }\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Dot = styled.div`\r\n  width: 8px;\r\n  height: 8px;\r\n  border-radius: 50px;\r\n  background-color: ${t => t.theme.colorText};\r\n`;\r\n\r\nexport const Diamond = styled.div`\r\n  width: 8px;\r\n  height: 8px;\r\n  background-color: ${t => t.theme.colorText};\r\n  transform: rotate(45deg);\r\n`;\r\n","import { ActionType, AppAction, TAction } from './types';\r\n\r\nexport function toggleTheme() {\r\n  return {\r\n    type: ActionType.StyleChangeTheme,\r\n  };\r\n}\r\nexport class ToggleThemeAction extends AppAction {\r\n  public static type = 'ToggleThemeAction';\r\n\r\n  static create() {\r\n    return { type: ToggleThemeAction.type };\r\n  }\r\n\r\n  static isActionOfType(action: TAction): action is TToggleThemeAction {\r\n    return ToggleThemeAction.type === action.type;\r\n  }\r\n}\r\nexport type TToggleThemeAction = TAction;\r\n","\r\nexport class LocalStorageService {\r\n  public static getValue(key: string): any {\r\n    const i = localStorage.getItem(key);\r\n    if (!i) {\r\n      return undefined;\r\n    }\r\n    try {\r\n      return JSON.parse(i);\r\n    } catch {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  public static saveValue(key: string, value: any): void {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  }\r\n}","// tslint:disable:no-console\r\n\r\nclass ConsoleLogger {\r\n  public log(...args: any) {\r\n    console.log(...args);\r\n  }\r\n  public debug(...args: any) {\r\n    console.debug(...args);\r\n  }\r\n  public warn(...args: any) {\r\n    console.log(...args);\r\n  }\r\n  public error(...args: any) {\r\n    console.log(...args);\r\n  }\r\n}\r\n\r\nexport const logger = new ConsoleLogger();\r\n","import moment from 'moment';\r\nimport { randomColor } from '../../utils/css';\r\nimport { LabelsResult, RedditPost } from './types';\r\n\r\nexport class ApiTranslator {\r\n  public post(r: any): RedditPost {\r\n    return {\r\n      id: r[0],\r\n      redditId: r[1],\r\n      title: r[2],\r\n      author: r[3],\r\n      subreddit: r[4],\r\n      body: r[5] === 'none' ? undefined : r[5],\r\n      numComments: r[6],\r\n      score: r[7],\r\n      created: moment(r[8]),\r\n      color: randomColor()\r\n    };\r\n  }\r\n\r\n  public labels(r: any): LabelsResult {\r\n    return {\r\n      sentiment: r[0],\r\n      category: r[1]\r\n    };\r\n  }\r\n}\r\n","import { LocalStorageService } from '../LocalStorageService';\r\nimport { logger } from '../logger';\r\nimport { ApiTranslator } from './ApiTranslator';\r\nimport { GetPostsParams, LabelsResult, RedditClient, RedditPost } from './types';\r\nexport class ApiClient implements RedditClient {\r\n  private static instance: ApiClient;\r\n  private translator = new ApiTranslator();\r\n  private maybeSaved = LocalStorageService.getValue('server');\r\n  private baseUrl = this.maybeSaved ? `http://${this.maybeSaved.url}:${this.maybeSaved.port}` : 'http://localhost:8080';\r\n\r\n  private constructor() { }\r\n\r\n  public static getInstance(): ApiClient {\r\n    if (!this.instance) {\r\n      this.instance = new ApiClient();\r\n    }\r\n\r\n    return this.instance;\r\n  }\r\n\r\n  public setBaseUrl(url: string, port: string): void {\r\n    this.baseUrl = `http://${url}:${port}`;\r\n    logger.log(`Api Url is now : ${this.baseUrl} from ${url} at ${port}`);\r\n  }\r\n\r\n  public async getPosts({ page = 1, subreddit, author }: GetPostsParams): Promise<readonly RedditPost[]> {\r\n    try {\r\n      logger.debug('Gettings posts for page', page);\r\n      const subredditPage = subreddit ? `&subreddit=${subreddit}` : '';\r\n      const authorPage = author ? `&author=${author}` : '';\r\n      const result = await this.get(`${this.baseUrl}/posts?page=${page}${subredditPage}${authorPage}`);\r\n\r\n      logger.debug('Got posts for page', result);\r\n      const posts = (result as any[]).filter(p => p).map(p => this.translator.post(p));\r\n      logger.debug('Translated posts ', page, posts);\r\n      return posts;\r\n    } catch (e) {\r\n      logger.error('Couldn\\'t load posts', e);\r\n\r\n      return [];\r\n    }\r\n  }\r\n\r\n  public async getLabels(id: string): Promise<LabelsResult | undefined> {\r\n    try {\r\n      logger.debug('Gettings labels for post id', id);\r\n      const result = await this.get(`${this.baseUrl}/labels?id=${id}`);\r\n\r\n      logger.debug('Got labels', result);\r\n      const labels = this.translator.labels(result);\r\n      logger.debug('Translated posts ', labels);\r\n      return labels;\r\n    } catch (e) {\r\n      logger.error('Couldn\\'t load posts', e);\r\n\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private async get(url: string): Promise<unknown> {\r\n    const response = await fetch(url, { mode: 'cors' });\r\n    return await response.json();\r\n  }\r\n}\r\n","import { Moment } from 'moment';\r\nimport { ApiClient } from './ApiClient';\r\n\r\nexport interface GetPostsParams {\r\n  page?: number;\r\n  subreddit?: string;\r\n  author?: string;\r\n}\r\nexport interface RedditClient {\r\n  getPosts(params: GetPostsParams): Promise<readonly RedditPost[]>;\r\n  getLabels(id: string): Promise<LabelsResult | undefined>;\r\n}\r\n\r\n// export const apiClient: RedditClient = MockApiClient.getInstance();\r\nexport const apiClient: RedditClient = ApiClient.getInstance();\r\nexport interface RedditPost {\r\n  id: number;\r\n  redditId: string;\r\n  title: string;\r\n  author: string;\r\n  subreddit: string;\r\n  body: string | undefined;\r\n  numComments: number;\r\n  score: number;\r\n  created: Moment;\r\n  color: string;\r\n}\r\n\r\nexport interface LabelsResult {\r\n  sentiment: string;\r\n  category: string;\r\n}\r\n","import { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\r\nimport { AppThunk } from '.';\r\nimport { apiClient, GetPostsParams, RedditPost } from '../services/api/types';\r\nimport { AppAction, TAction } from './types';\r\n\r\nexport class LoadTweetsAction extends AppAction {\r\n  public static type = 'LoadTweetsAction';\r\n\r\n  static create(params: GetPostsParams = {}): AppThunk {\r\n    return async dispatch => {\r\n      const posts = await apiClient.getPosts(params);\r\n\r\n      dispatch({\r\n        type: LoadTweetsAction.type,\r\n        payload: posts,\r\n      });\r\n    };\r\n  }\r\n\r\n  static isActionOfType(action: TAction): action is TLoadTweetsActions {\r\n    return LoadTweetsAction.type === action.type;\r\n  }\r\n}\r\nexport interface TLoadTweetsActions extends TAction {\r\n  payload: readonly RedditPost[];\r\n}\r\n\r\nexport class SetLowerDateBound extends AppAction {\r\n  public static type = 'SetLowerDateBound';\r\n\r\n  static create(date: MaterialUiPickersDate) {\r\n    return {\r\n      type: SetLowerDateBound.type,\r\n      payload: date\r\n    };\r\n  }\r\n\r\n  static isActionOfType(action: TAction): action is TSetLowerDateBound {\r\n    return SetLowerDateBound.type === action.type;\r\n  }\r\n}\r\n\r\nexport interface TSetLowerDateBound extends TAction {\r\n  payload: MaterialUiPickersDate;\r\n}\r\n\r\nexport class SetUpperDateBound extends AppAction {\r\n  public static type = 'SetUpperDateBound';\r\n\r\n  static create(date: MaterialUiPickersDate) {\r\n    return {\r\n      type: SetUpperDateBound.type,\r\n      payload: date\r\n    };\r\n  }\r\n\r\n  static isActionOfType(action: TAction): action is TSetUpperDateBound {\r\n    return SetUpperDateBound.type === action.type;\r\n  }\r\n}\r\n\r\nexport interface TSetUpperDateBound extends TAction {\r\n  payload: MaterialUiPickersDate;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Drawer } from '@material-ui/core';\r\nimport NavigationEntry from '../components/NavigationEntry';\r\nimport styled from 'styled-components';\r\nimport { styles } from '../styles/styleguide';\r\nimport { Link } from 'react-router-dom';\r\nimport { config } from '../config';\r\nimport HoverIcon from '../components/icons/HoverIcon';\r\nimport { Diamond } from '../common/Shape';\r\nimport { connect } from 'react-redux';\r\nimport { ToggleThemeAction } from '../actions';\r\n\r\nconst MenuContainer = styled.div`\r\n  position: sticky;\r\n  z-index: 50;\r\n  width: 100%;\r\n  height: 70px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  background-color: ${(t) => t.theme.colorBG1};\r\n`;\r\n\r\nconst MenuIcon = styled.div`\r\n  padding: 0 ${styles.m4};\r\n`;\r\n\r\nconst Container = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  overflow-x: hidden;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  width: 320px;\r\n  padding: ${styles.m4} 0;\r\n  padding-left: ${styles.m4};\r\n  background-color: ${(t) => `rgba(${t.theme.colorBG0RGB}, 1)`};\r\n  color: ${(t) => t.theme.colorText};\r\n`;\r\n\r\nconst LinksContainer = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: ${styles.m1} 0;\r\n`;\r\n\r\nconst Seperator = styled.div`\r\n  margin: ${styles.m4} 0;\r\n  align-self: center;\r\n`;\r\n\r\nconst BottomIcons = styled.div`\r\n  display: flex;\r\n\r\n  & > * {\r\n    margin-right: 16px;\r\n  }\r\n`;\r\n\r\nfunction NavigationList({ toggleTheme }: Props) {\r\n  const { isOpen, toggleOpen } = NavigationListState();\r\n\r\n  const renderDrawer = () => {\r\n    return (\r\n      <Drawer\r\n        anchor=\"left\"\r\n        open={isOpen}\r\n        onClose={toggleOpen}\r\n        classes={{ paper: 'drawer-bg' }}\r\n      >\r\n        <Container>\r\n          <HoverIcon onClick={toggleOpen} size=\"large\" icon=\"menu_open\" />\r\n          <LinksContainer>\r\n            <Seperator>\r\n              <Diamond />\r\n            </Seperator>\r\n            <Link to=\"/\">\r\n              <NavigationEntry text=\"Home\" icon=\"home\" onClick={toggleOpen} />\r\n            </Link>\r\n            <Link to=\"/dashboard\">\r\n              <NavigationEntry\r\n                text=\"Dashboard\"\r\n                icon=\"select_all\"\r\n                onClick={toggleOpen}\r\n              />\r\n            </Link>\r\n            <Seperator>\r\n              <Diamond />\r\n            </Seperator>\r\n            <Link to=\"/about\">\r\n              <NavigationEntry\r\n                text=\"About\"\r\n                icon=\"fingerprint\"\r\n                onClick={toggleOpen}\r\n              />\r\n            </Link>\r\n            <a href={config.documentationURL} target=\"_blank\" rel=\"noreferrer\">\r\n              <NavigationEntry\r\n                text=\"Documentation\"\r\n                icon=\"code\"\r\n                onClick={toggleOpen}\r\n              />\r\n            </a>\r\n          </LinksContainer>\r\n          <BottomIcons>\r\n            <HoverIcon\r\n              onClick={toggleTheme}\r\n              size=\"large\"\r\n              icon=\"invert_colors\"\r\n            />\r\n            <Link to=\"/settings\">\r\n              <HoverIcon size=\"large\" icon=\"settings\" />\r\n            </Link>\r\n          </BottomIcons>\r\n        </Container>\r\n      </Drawer>\r\n    );\r\n  };\r\n\r\n  const renderNavBar = () => {\r\n    return (\r\n      <MenuContainer>\r\n        {!isOpen && (\r\n          <MenuIcon>\r\n            <HoverIcon onClick={toggleOpen} size=\"large\" icon=\"menu\" />\r\n          </MenuIcon>\r\n        )}\r\n      </MenuContainer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {renderDrawer()}\r\n      {renderNavBar()}\r\n    </>\r\n  );\r\n}\r\n\r\ninterface State {\r\n  isOpen: boolean;\r\n  toggleOpen: () => void;\r\n}\r\n\r\nconst NavigationListState = (): State => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen);\r\n\r\n  return {\r\n    isOpen,\r\n    toggleOpen,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  toggleTheme: ToggleThemeAction.create,\r\n};\r\n\r\ntype Props = typeof mapDispatchToProps;\r\n\r\nexport default connect(undefined, mapDispatchToProps)(NavigationList);\r\n","import { TAction } from '../actions';\r\nimport { ToggleThemeAction } from '../actions/styleActions';\r\nimport { LocalStorageService } from '../services/LocalStorageService';\r\nimport { darkTheme, lightTheme, Theme } from '../styles/styleguide';\r\n\r\nexport enum ThemeTypes { Light, Dark }\r\n\r\nexport interface State {\r\n  themeType: ThemeTypes;\r\n  theme: Theme;\r\n}\r\n\r\nconst savedTheme = LocalStorageService.getValue(\"theme\");\r\nconst initialState: State = savedTheme || {\r\n  themeType: ThemeTypes.Dark,\r\n  theme: darkTheme\r\n};\r\n\r\nexport function styleReducer(state = initialState, action: TAction) {\r\n  if (ToggleThemeAction.isActionOfType(action)) {\r\n    const update = getThemeUpdates(state);\r\n    LocalStorageService.saveValue(\"theme\", update);\r\n    return { ...state, ...update };\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport function getThemeUpdates(state: State): Partial<State> {\r\n  if (state.themeType === ThemeTypes.Dark) {\r\n    return {\r\n      themeType: ThemeTypes.Light,\r\n      theme: lightTheme\r\n    };\r\n  }\r\n\r\n  return {\r\n    themeType: ThemeTypes.Dark,\r\n    theme: darkTheme\r\n  };\r\n}\r\n","// tslint:disable:no-null-keyword\r\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\r\nimport { LoadTweetsAction, SetLowerDateBound, SetUpperDateBound } from '../actions/tweetActions';\r\nimport { TAction } from '../actions/types';\r\nimport { RedditPost } from '../services/api/types';\r\n\r\nexport interface State {\r\n  posts: readonly RedditPost[];\r\n  lowerDateBound: MaterialUiPickersDate;\r\n  upperDateBound: MaterialUiPickersDate;\r\n}\r\nconst initialState: State = {\r\n  posts: [],\r\n  lowerDateBound: null,\r\n  upperDateBound: null\r\n};\r\n\r\nexport function tweetReducer(state = initialState, action: TAction): State {\r\n  if (LoadTweetsAction.isActionOfType(action)) {\r\n    return { ...state, posts: action.payload };\r\n  }\r\n  else if (SetLowerDateBound.isActionOfType(action)) {\r\n    return { ...state, lowerDateBound: action.payload ? action.payload.startOf('day') : null };\r\n  }\r\n  else if (SetUpperDateBound.isActionOfType(action)) {\r\n    return { ...state, upperDateBound: action.payload ? action.payload.startOf('day') : null };\r\n  }\r\n\r\n  return state;\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { State as StyleState, styleReducer } from './styleReducer';\r\nimport { State as TweetState, tweetReducer } from './tweetReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  style: styleReducer,\r\n  tweets: tweetReducer\r\n});\r\n\r\nexport interface GlobalState {\r\n  style: StyleState;\r\n  tweets: TweetState;\r\n}\r\n","import styled from 'styled-components';\r\nimport { styles } from '../styles/styleguide';\r\nimport { CenterDiv } from './CenterDiv';\r\n\r\nexport const CallToActionBtn = styled(CenterDiv)`\r\n  width: 240px;\r\n  height: 50px;\r\n  cursor: pointer;\r\n  font: ${styles.fontN4};\r\n  color: ${t => t.theme.colorText};\r\n  background-color: ${t => `rgba(${t.theme.colorP1RGB}, 0.7)`};\r\n  transition: all ${styles.transitionParams};\r\n  &:hover {\r\n    background-color: ${t => t.theme.colorP1};\r\n    color: ${t => t.theme.colorTextN};\r\n\r\n  }\r\n`;\r\n\r\nexport const CallToActionOutlinedBtn = styled(CallToActionBtn)`\r\n  background: transparent;\r\n  border: 1px solid ${t => `rgba(${t.theme.colorP1RGB}, 0.7)`};\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { TextFieldProps as MaterialTextFieldProps } from '@material-ui/core/TextField/TextField';\r\nimport { Icon } from '@material-ui/core';\r\nimport { CenterDiv } from '../../common/CenterDiv';\r\nimport { styles } from '../../styles/styleguide';\r\n\r\nconst DateFieldDiv = styled(CenterDiv)`\r\n  transition: all ${styles.transitionParams};\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${t => t.theme.colorP1};\r\n  padding: 0 ${styles.m2};\r\n  color: ${t => t.theme.colorP1};\r\n\r\n  &:hover {\r\n    color: ${t => t.theme.colorP2};\r\n    border-color: ${t => t.theme.colorP2};\r\n  }\r\n`;\r\n\r\nexport type DateFieldProps = Pick<MaterialTextFieldProps, 'onClick' | 'value'> & { placeholder: string };\r\nexport function DateField(props: DateFieldProps) {\r\nconst { value, placeholder, ...filtered } = props;\r\nif (typeof value === 'string') {\r\n  if (value) {\r\n    return (\r\n      <DateFieldDiv {...filtered }>\r\n        {placeholder}: {value}\r\n      </DateFieldDiv>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DateFieldDiv {...filtered }>\r\n      {placeholder}\r\n      <Icon>expand_more</Icon>\r\n    </DateFieldDiv>\r\n  );\r\n}\r\n\r\nreturn <></>;\r\n}\r\n\r\nexport type ReducerTextFieldProps = Omit<DateFieldProps, 'placeholder'>;\r\nexport function withPlaceholder(placeholder: string, Component: React.ComponentType<DateFieldProps>) {\r\n  return (props: ReducerTextFieldProps) => (\r\n    <Component placeholder={placeholder} {...props} />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport DateMomentUtils from '@date-io/moment';\r\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport { ReducerTextFieldProps as DashboardDateFieldProps } from './DashboardDateField';\r\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\r\n\r\ninterface Props {\r\n  textComponent: React.ComponentType<DashboardDateFieldProps>;\r\n  onChange(date: MaterialUiPickersDate): void;\r\n  value: MaterialUiPickersDate;\r\n}\r\nfunction DashboardDatePicker({ textComponent, onChange, value }: Props) {\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateMomentUtils}>\r\n      <DatePicker\r\n        value={value}\r\n        onChange={onChange}\r\n        disableFuture\r\n        variant='dialog'\r\n        TextFieldComponent={textComponent}\r\n        format='Do [of] MMMM YYYY'\r\n      />\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n}\r\n\r\nexport default DashboardDatePicker;\r\n","import { Grow, Icon } from '@material-ui/core';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { RedditPost } from '../../services/api/types';\r\nimport { styles } from '../../styles/styleguide';\r\n\r\ninterface Props {\r\n  post: RedditPost;\r\n  index: number;\r\n}\r\n\r\nconst Container = styled.div`\r\n  max-width: 920px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid ${t => t.theme.colorGray0};\r\n  padding: 20px;\r\n  cursor: pointer;\r\n\r\n  transition: all ${styles.transitionParams};\r\n  * {\r\n    transition: all ${styles.transitionParams};\r\n  }\r\n\r\n  &:hover {\r\n    color: ${t => t.theme.colorP1};\r\n  }\r\n\r\n`;\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n`;\r\nconst IconContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  & span {\r\n    font-size: 4rem;\r\n  }\r\n`;\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\nconst MetaText = styled.p`\r\n  margin-left: ${styles.m3};\r\n  font: ${styles.fontN3};\r\n  text-align: left;\r\n`;\r\nconst ContentText = styled.p`\r\n  margin-left: ${styles.m3};\r\n  font: ${styles.fontN2};\r\n  text-align: left;\r\n`;\r\n\r\nconst ReadMoreBtn = styled.div`\r\n  color: ${t => t.theme.colorGray0};\r\n`;\r\n\r\nfunction Post({ post, index }: Props) {\r\n  return (\r\n    <Grow appear in timeout={300 + index * 200}>\r\n      <Container>\r\n        <Flex>\r\n          <IconContainer>\r\n            <Icon style={{ color: post.color }}>face</Icon>\r\n          </IconContainer>\r\n          <Content>\r\n            <MetaText>\r\n              u/{post.author} - {post.created.format('DD/MM/YYYY - HH:mm:ss')}\r\n            </MetaText>\r\n            <ContentText>\r\n              {post.title.substring(0, 150)}\r\n            </ContentText>\r\n          </Content>\r\n        </Flex>\r\n        <ReadMoreBtn>\r\n          <Icon style={{ fontSize: '56px' }}>\r\n            keyboard_arrow_right\r\n          </Icon>\r\n        </ReadMoreBtn>\r\n      </Container>\r\n    </Grow>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { GlobalState } from '../../reducers';\r\nimport Post from './Post';\r\nimport { RedditPost } from '../../services/api/types';\r\nimport { logger } from '../../services/logger';\r\n\r\nfunction PostList({ posts, onPostPicked }: Props) {\r\n  return (\r\n    <div>\r\n      {posts.map((post, i) => (\r\n        <div key={post.id} onClick={() => onPostPicked(post)}>\r\n          <Post post={post} index={i} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state: GlobalState) {\r\n  const filteredLower = state.tweets.lowerDateBound\r\n    ? state.tweets.posts.filter((post) =>\r\n        state.tweets.lowerDateBound?.isSameOrBefore(\r\n          post.created.startOf('day'),\r\n        ),\r\n      )\r\n    : state.tweets.posts;\r\n\r\n  const filtered = state.tweets.upperDateBound\r\n    ? filteredLower.filter((post) =>\r\n        state.tweets.upperDateBound?.isSameOrAfter(post.created.startOf('day')),\r\n      )\r\n    : filteredLower;\r\n\r\n  logger.log('Map state list with', state.tweets);\r\n\r\n  return {\r\n    posts: filtered,\r\n  };\r\n}\r\ntype Props = ReturnType<typeof mapStateToProps> & {\r\n  onPostPicked(post: RedditPost): void;\r\n};\r\n\r\nexport default connect(mapStateToProps)(PostList);\r\n","import { Grow, Icon } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { RedditPost } from '../../services/api/types';\r\nimport { styles } from '../../styles/styleguide';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 25px;\r\n  padding: ${styles.m5};\r\n`;\r\n\r\nconst ImageSection = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  padding: ${styles.m5} 0 ${styles.M1} ${styles.m5};\r\n  // border-bottom: 1px dotted ${t => t.theme.colorGray0};\r\n`;\r\n  const TitleSection = styled.div`\r\n  width: 100%;\r\n  text-align: center;\r\n  padding: ${styles.m5} 0 ${styles.M1} ${styles.m5};\r\n  border-bottom: 1px solid ${t => t.theme.colorGray0};\r\n  font: ${styles.fontH4};\r\n`;\r\nconst ImageSectionText = styled.p`\r\n  display: flex;\r\n  flex-direction: column;\r\n  font: ${styles.fontN4};\r\n  text-align: left;\r\n  margin-left: ${styles.m5};\r\n`;\r\n\r\nconst Content = styled.p`\r\n  display: flex;\r\n  flex-direction: column;\r\n  font: ${styles.fontN3};\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  padding: ${styles.m5};\r\n`;\r\n\r\nconst ContinueSection = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nconst ContinueAction = styled.a`\r\n  font: ${styles.fontN4};\r\n  text-decoration: underline;\r\n  margin: ${styles.m3};\r\n  cursor: pointer;\r\n  transition: color ${styles.transitionParams};\r\n\r\n  &:hover {\r\n    color: ${t => t.theme.colorP1};\r\n  }\r\n`;\r\nconst IconContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  & span {\r\n    font-size: 7rem;\r\n  }\r\n`;\r\nconst InfoContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n  color: ${t => t.theme.colorGray1};\r\n\r\n  & span {\r\n    margin-right: 25px;\r\n    font-size: 2rem;\r\n  }\r\n`;\r\nconst ContentBody = styled.div`\r\n  margin-top: 25px;\r\n  font: ${styles.fontN5};\r\n`;\r\nfunction PostPreview({ post }: Props) {\r\n  return (\r\n    <Grow appear in timeout={500}>\r\n      <Container>\r\n        <ImageSection>\r\n          <IconContainer>\r\n              <Icon style={{ color: post.color }}>face</Icon>\r\n            </IconContainer>\r\n          <ImageSectionText>\r\n            <p>\r\n              u/{post.author}\r\n            </p>\r\n          </ImageSectionText>\r\n        </ImageSection>\r\n        <TitleSection>\r\n          {post.title}\r\n        </TitleSection>\r\n        <Content>\r\n          <InfoContainer>\r\n            <Icon>schedule send</Icon>\r\n            {post.created.format('DD/MM/YYYY - HH:mm:ss')}\r\n          </InfoContainer>\r\n          <InfoContainer>\r\n            <Icon>forum</Icon>\r\n            {post.numComments}\r\n          </InfoContainer>\r\n          <InfoContainer>\r\n            <Icon>favorite border</Icon>\r\n            {post.score}\r\n          </InfoContainer>\r\n          <ContentBody>\r\n            {post.body || 'No content'}\r\n          </ContentBody>\r\n        </Content>\r\n        <ContinueSection>\r\n          <Link to={`/post/${post.id}`}>\r\n            <ContinueAction>\r\n              Read analysis\r\n            </ContinueAction>\r\n          </Link>\r\n          {/* <ContinueAction href={post.url} target='_blank'>\r\n            See the original\r\n          </ContinueAction> */}\r\n        </ContinueSection>\r\n      </Container>\r\n    </Grow>\r\n  );\r\n}\r\n\r\ntype Props = { post: RedditPost };\r\n\r\nexport default connect()(PostPreview);\r\n","import { TextField } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {\r\n  LoadTweetsAction,\r\n  SetLowerDateBound,\r\n  SetUpperDateBound,\r\n} from '../actions';\r\nimport { CallToActionOutlinedBtn } from '../common/Buttons';\r\nimport {\r\n  DateField,\r\n  withPlaceholder as DateFieldHOC,\r\n} from '../components/dates/DashboardDateField';\r\nimport DashboardDatePicker from '../components/dates/DashboardDatePicker';\r\nimport HoverIcon from '../components/icons/HoverIcon';\r\nimport PostList from '../components/reddit/PostList';\r\nimport PostPreview from '../components/reddit/PostPreview';\r\nimport { GlobalState } from '../reducers';\r\nimport { RedditPost, GetPostsParams } from '../services/api/types';\r\nimport { styles } from '../styles/styleguide';\r\n\r\nconst ColumnContainer = styled.div`\r\n  width: 95%;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\nconst FiltersContainer = styled.div`\r\n  margin: ${styles.m2} 90px;\r\n  display: flex;\r\n  align-items: flex-end;\r\n\r\n  & > * {\r\n    margin-right: ${styles.m4};\r\n  }\r\n`;\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: ${styles.m5} 0;\r\n`;\r\nconst ListColumn = styled.div`\r\n  flex: 3;\r\n`;\r\nconst PreviewColumn = styled.div`\r\n  flex: 2;\r\n`;\r\n\r\nconst FilterElement = styled.div`\r\n  margin: 0 15px;\r\n`;\r\nconst SearchBtn = styled(CallToActionOutlinedBtn)`\r\n  width: 180px;\r\n  height: 36px;\r\n`;\r\nconst PageNav = styled.div`\r\n  margin: 10px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${(t) => t.theme.colorP1};\r\n\r\n  & span {\r\n    font-size: 2rem;\r\n  }\r\n`;\r\nfunction Dashboard({\r\n  setLowerBound,\r\n  setUpperBound,\r\n  lowerBound,\r\n  upperBound,\r\n  load,\r\n}: ReduxProps) {\r\n  const [currentPost, setCurrentPost] = useState<RedditPost>();\r\n  const [page, setPage] = useState(1);\r\n  const [inputUsername, setInputUsername] = useState('');\r\n  const [inputSubreddit, setInputSubreddit] = useState('');\r\n\r\n  useEffect(() => {\r\n    load({ page });\r\n  }, [page, load]);\r\n\r\n  const handleTweetPost = (post: RedditPost) => {\r\n    setCurrentPost(post);\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    load({\r\n      page,\r\n      author: inputUsername || undefined,\r\n      subreddit: inputSubreddit || undefined,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <FiltersContainer>\r\n        <DashboardDatePicker\r\n          textComponent={DateFieldHOC('From', DateField)}\r\n          onChange={setLowerBound}\r\n          value={lowerBound}\r\n        />\r\n        <DashboardDatePicker\r\n          textComponent={DateFieldHOC('To', DateField)}\r\n          onChange={setUpperBound}\r\n          value={upperBound}\r\n        />\r\n        <FilterElement>\r\n          <TextField\r\n            value={inputUsername}\r\n            onChange={(e) => setInputUsername(e.target.value)}\r\n            id=\"reddit_username\"\r\n            label=\"Reddit username\"\r\n          />\r\n        </FilterElement>\r\n        <FilterElement>\r\n          <TextField\r\n            value={inputSubreddit}\r\n            onChange={(e) => setInputSubreddit(e.target.value)}\r\n            id=\"subreddit_name\"\r\n            label=\"Subreddit name\"\r\n          />\r\n        </FilterElement>\r\n        <SearchBtn onClick={handleSearch}>Search</SearchBtn>\r\n      </FiltersContainer>\r\n      <ColumnContainer>\r\n        <ListColumn>\r\n          <PostList onPostPicked={handleTweetPost} />\r\n          <PageNav>\r\n            <HoverIcon\r\n              icon=\"chevron_left\"\r\n              onClick={page > 1 ? () => setPage(page - 1) : undefined}\r\n            ></HoverIcon>\r\n            {page}\r\n            <HoverIcon\r\n              icon=\"chevron_right\"\r\n              onClick={() => setPage(page + 1)}\r\n            ></HoverIcon>\r\n          </PageNav>\r\n        </ListColumn>\r\n        {currentPost && (\r\n          <PreviewColumn>\r\n            <PostPreview post={currentPost} />\r\n          </PreviewColumn>\r\n        )}\r\n      </ColumnContainer>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  setLowerBound: SetLowerDateBound.create,\r\n  setUpperBound: SetUpperDateBound.create,\r\n  load: (p: GetPostsParams) => LoadTweetsAction.create(p),\r\n};\r\n\r\nconst mapStateToProps = (state: GlobalState) => {\r\n  return {\r\n    lowerBound: state.tweets.lowerDateBound,\r\n    upperBound: state.tweets.upperDateBound,\r\n  };\r\n};\r\n\r\ntype ReduxProps = typeof mapDispatchToProps &\r\n  ReturnType<typeof mapStateToProps>;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard as any);\r\n","import React from 'react';\r\n\r\nexport function About() {\r\n  return (\r\n    <div>\r\n      KKK\r\n    </div>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport React from 'react';\r\nimport { ReactSVG } from 'react-svg';\r\nimport { CenterDiv } from '../../common/CenterDiv';\r\n\r\nconst Container = styled(CenterDiv)`\r\n  width: 320px;\r\n  font-size: 72px;\r\n\r\n  & svg {\r\n    fill: ${(t) => t.theme.colorBG0};\r\n  }\r\n`;\r\n\r\nfunction HoverIcon() {\r\n  return (\r\n    <Container>\r\n      <ReactSVG src='reddit.svg' />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default HoverIcon;\r\n","import { Grow, Icon } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { CallToActionBtn, CallToActionOutlinedBtn } from '../common/Buttons';\r\nimport Reddit from '../components/icons/Reddit';\r\nimport { config } from '../config';\r\nimport { styles } from '../styles/styleguide';\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Overlay = styled.div`\r\n  margin: 90px 0 0 20%;\r\n`;\r\n\r\nconst BannerContainer = styled.div`\r\n  position: relative;\r\n  height: 400px;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  background-color: ${(t) => t.theme.colorBG3};\r\n`;\r\n\r\nconst Actions = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  margin-left: 90px;\r\n`;\r\n\r\nconst TextTitle = styled.div`\r\n  margin-top: 92px;\r\n  font: ${styles.fontH5};\r\n  color: ${(t) => t.theme.colorP1};\r\n`;\r\n\r\nconst TestDescribtion = styled.div`\r\n  margin-top: 12px;\r\n  font: ${styles.fontN6};\r\n`;\r\n\r\nconst GetStartedActions = styled.div`\r\n  margin-top: 64px;\r\n  display: flex;\r\n\r\n  & * {\r\n    margin-right: ${styles.m5};\r\n  }\r\n`;\r\n\r\nconst ContentContainer = styled.div`\r\n  width: 80%;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst CardsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin-top: ${styles.M2};\r\n  text-align: left;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  max-width: 280px;\r\n`;\r\n\r\nconst CardTitle = styled.div`\r\n  font: ${styles.fontN7};\r\n  margin-bottom: ${styles.m4};\r\n`;\r\n\r\nconst CardDescribtion = styled.div`\r\n  font: ${styles.fontN5};\r\n`;\r\n\r\nfunction Home() {\r\n  return (\r\n    <Container>\r\n      <BannerContainer>\r\n        <Overlay>\r\n          <Reddit />\r\n        </Overlay>\r\n        <Actions>\r\n          <TextTitle>REDDIT STASH</TextTitle>\r\n          <TestDescribtion>Explore, search and analyze reddit posts</TestDescribtion>\r\n          <GetStartedActions>\r\n            <Link to='/dashboard'>\r\n              <CallToActionBtn>Get started</CallToActionBtn>\r\n            </Link>\r\n            <a href={config.documentationURL} target='_blank' rel='noreferrer'>\r\n              <CallToActionOutlinedBtn>\r\n                <span>Read docs</span>\r\n                <Icon>keyboard_arrow_right</Icon>\r\n              </CallToActionOutlinedBtn>\r\n            </a>\r\n          </GetStartedActions>\r\n        </Actions>\r\n      </BannerContainer>\r\n      <ContentContainer>\r\n        <CardsContainer>\r\n          <Grow in appear timeout={500}>\r\n            <Card>\r\n              <CardTitle>Explore posts</CardTitle>\r\n              <CardDescribtion>\r\n                Find reddit posts in our frequently updated database of {config.subredditsNumber} subreddits\r\n              </CardDescribtion>\r\n            </Card>\r\n          </Grow>\r\n          <Grow in appear timeout={1200}>\r\n            <Card>\r\n              <CardTitle>Search posts</CardTitle>\r\n              <CardDescribtion>\r\n                Browse all posts or find more specific ones by applying filters. We allow\r\n                to search posts from a given time frame, posted by a specific user or in a specific subreddit\r\n              </CardDescribtion>\r\n            </Card>\r\n          </Grow>\r\n          <Grow in appear timeout={1500}>\r\n            <Card>\r\n              <CardTitle>Analyze posts</CardTitle>\r\n              <CardDescribtion>\r\n                Find interesting posts and analyze their contents.\r\n              </CardDescribtion>\r\n            </Card>\r\n          </Grow>\r\n        </CardsContainer>\r\n      </ContentContainer>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { CallToActionBtn } from '../common/Buttons';\r\nimport { ApiClient } from '../services/api/ApiClient';\r\nimport { LocalStorageService } from '../services/LocalStorageService';\r\nimport { darkTheme } from '../styles/styleguide';\r\n\r\nconst Container = styled.div`\r\n  margin: 40px auto;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  max-width: 400px;\r\n`;\r\nconst InputsContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 20px;\r\n`;\r\nconst InputDiv = styled.div`\r\n  margin: 5px;\r\n`;\r\nconst Input = styled.input`\r\n  padding: 10px;\r\n  background-color: ${(t) => t.theme.colorBG0};\r\n  border: 1px solid ${(t) => t.theme.colorText};\r\n  border-radius: ${darkTheme.defaultRadius};\r\n  placeholder: ${(t) => t.theme.colorGray0};\r\n  color: ${(t) => t.theme.colorText};\r\n  font: ${darkTheme.fontN4};\r\n`;\r\nexport function Settings() {\r\n  const [urlInput, setUrlInput] = useState(\r\n    LocalStorageService.getValue('server').url || '',\r\n  );\r\n  const [portInput, setPortInput] = useState(\r\n    LocalStorageService.getValue('server').port || '',\r\n  );\r\n\r\n  useEffect(() => {\r\n    const s: { url: string; port: string } =\r\n      LocalStorageService.getValue('server');\r\n    if (s) {\r\n      setUrlInput(s.url);\r\n      setPortInput(s.port);\r\n    }\r\n  }, []);\r\n\r\n  const handleSubmit = () => {\r\n    ApiClient.getInstance().setBaseUrl(urlInput, portInput);\r\n    LocalStorageService.saveValue('server', { url: urlInput, port: portInput });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <InputsContainer>\r\n        Connect to backend at:\r\n        <InputDiv>\r\n          <Input\r\n            id=\"url\"\r\n            value={urlInput}\r\n            onChange={(e) => setUrlInput(e.target.value)}\r\n            placeholder=\"localhost\"\r\n          />\r\n        </InputDiv>\r\n        <InputDiv>\r\n          <Input\r\n            id=\"outlined-basic\"\r\n            value={portInput}\r\n            onChange={(e) => setPortInput(e.target.value)}\r\n            placeholder=\"8080\"\r\n          />\r\n        </InputDiv>\r\n      </InputsContainer>\r\n      <CallToActionBtn onClick={handleSubmit}>Save</CallToActionBtn>\r\n    </Container>\r\n  );\r\n}\r\n","// tslint:disable:no-null-keyword\r\n\r\nimport { Grow, Icon } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { GlobalState } from '../../reducers';\r\nimport { apiClient, LabelsResult } from '../../services/api/types';\r\nimport { styles } from '../../styles/styleguide';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 25px;\r\n  padding: ${styles.m5};\r\n`;\r\n\r\nconst ImageSection = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  padding: ${styles.m5} 0 ${styles.M1} ${styles.m5};\r\n  // border-bottom: 1px dotted ${t => t.theme.colorGray0};\r\n`;\r\n  const TitleSection = styled.div`\r\n  width: 100%;\r\n  text-align: center;\r\n  padding: ${styles.m5} 0 ${styles.M1} ${styles.m5};\r\n  border-bottom: 1px solid ${t => t.theme.colorGray0};\r\n  font: ${styles.fontH3};\r\n`;\r\nconst ImageSectionText = styled.p`\r\n  display: flex;\r\n  flex-direction: column;\r\n  font: ${styles.fontN4};\r\n  text-align: left;\r\n  margin-left: ${styles.m5};\r\n`;\r\n\r\nconst Content = styled.p`\r\n  display: flex;\r\n  flex-direction: column;\r\n  font: ${styles.fontN3};\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  padding: ${styles.m5};\r\n`;\r\n\r\nconst IconContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  & span {\r\n    font-size: 7rem;\r\n  }\r\n`;\r\nconst InfoContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n  font: ${styles.fontN3};\r\n\r\n  & span {\r\n    margin-right: 25px;\r\n    font-size: 2rem;\r\n  }\r\n`;\r\nconst ContentBody = styled.div`\r\n  margin: 25px 0;\r\n  font: ${styles.fontN5};\r\n`;\r\nconst GoBackContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 1.2rem;\r\n  cursor: pointer;\r\n  transition: color ${styles.transitionParams};\r\n  width: max-content;\r\n\r\n  & span {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  &:hover {\r\n    color: ${t => t.theme.colorP1};\r\n  }\r\n`;\r\nconst AnalysisSpan = styled.p`\r\n  color: ${t => t.theme.colorP1};\r\n  font: ${styles.fontN3};\r\n  margin-left: 10px;\r\n`;\r\n\r\nfunction PostAnalysis({ posts }: Props) {\r\n  const { id: routeId } = useParams() as { id: string };\r\n  const id = parseInt(routeId, 10);\r\n  const post = posts.find(p => p.id === id);\r\n  const [labels, setLabels] = useState<LabelsResult | undefined | null>();\r\n\r\n  useEffect(() => {\r\n    apiClient.getLabels(routeId).then(result => {\r\n      setLabels(result || null);\r\n    });\r\n  }, [routeId]);\r\n\r\n  if (!post) {\r\n    return <>No post</>;\r\n  }\r\n\r\n  if (labels === undefined) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  if (labels === null) {\r\n    return <div>Sorry, we couldn't find predictions for that post</div>;\r\n  }\r\n\r\n  return (\r\n    <Grow appear in timeout={500}>\r\n      <Container>\r\n        <Link to='/dashboard'>\r\n          <GoBackContainer>\r\n            <Icon>chevron_left</Icon>\r\n            Go back\r\n          </GoBackContainer>\r\n        </Link>\r\n        <TitleSection>\r\n          {post.title}\r\n        </TitleSection>\r\n        <ImageSection>\r\n          <IconContainer>\r\n            <Icon style={{ color: post.color }}>face</Icon>\r\n          </IconContainer>\r\n          <ImageSectionText>\r\n            <p>\r\n              u/{post.author}\r\n            </p>\r\n          </ImageSectionText>\r\n        </ImageSection>\r\n        <Content>\r\n          <InfoContainer>\r\n            <Icon>schedule send</Icon>\r\n            Posted on {post.created.format('DD/MM/YYYY')} at {post.created.format('HH:mm:ss')}\r\n          </InfoContainer>\r\n          <InfoContainer>\r\n            <Icon>forum</Icon>\r\n            {post.numComments} users participated in discussion under this post\r\n          </InfoContainer>\r\n          <InfoContainer>\r\n            <Icon>favorite border</Icon>\r\n            Post has received a total score of {post.score}\r\n          </InfoContainer>\r\n          <ContentBody>\r\n            {post.body || 'This post has no content'}\r\n          </ContentBody>\r\n          <InfoContainer>\r\n            <Icon>lightbulb</Icon>\r\n            Post has been assigned a sentiment analysis score of\r\n            <AnalysisSpan>\r\n              {labels.sentiment}\r\n            </AnalysisSpan>\r\n          </InfoContainer>\r\n          <InfoContainer>\r\n            <Icon>lightbulb</Icon>\r\n            Post has been assigned a category analysis of\r\n            <AnalysisSpan>\r\n              {labels.category}\r\n            </AnalysisSpan>\r\n          </InfoContainer>\r\n        </Content>\r\n      </Container>\r\n    </Grow>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state: GlobalState) {\r\n  return {\r\n    posts: state.tweets.posts\r\n  };\r\n}\r\ntype Props = ReturnType<typeof mapStateToProps>;\r\n\r\nexport default connect(mapStateToProps)(PostAnalysis);\r\n","import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { HashRouter, Switch, Route } from 'react-router-dom';\r\nimport NavigationList from './containers/NavigationList';\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { GlobalState, rootReducer } from './reducers';\r\nimport thunk from 'redux-thunk';\r\nimport styled, { createGlobalStyle, ThemeProvider } from 'styled-components';\r\nimport Dashboard from './containers/Dashboard';\r\nimport { connect } from 'react-redux';\r\nimport { About } from './containers/About';\r\nimport Home from './containers/Home';\r\nimport { LoadTweetsAction } from './actions';\r\nimport { Settings } from './containers/Settings';\r\nimport PostAnalysis from './components/reddit/PostAnalysis';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nconst Global = createGlobalStyle`\r\n  body {\r\n    text-align: center;\r\n    font-family: Roboto, Arial, Helvetica, sans-serif;\r\n    font-weight: 200;\r\n\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n\r\n    background-color: ${(t) => t.theme.colorBG0};\r\n    color: ${(t) => t.theme.colorText};\r\n  }\r\n\r\n  .drawer-bg {\r\n    background-color: rgba(${(t) => t.theme.colorBG1RGB}, 0.0) !important;\r\n  }\r\n\r\n  .MuiPickersToolbar-toolbar, .MuiPickersDay-daySelected {\r\n    background-color: ${(t) => t.theme.colorP1} !important;\r\n  }\r\n\r\n  .MuiInputBase-root {\r\n    color: ${t => t.theme.colorText} !important;\r\n  }\r\n\r\n  .MuiInputLabel-root {\r\n    color: ${t => t.theme.colorP1} !important;\r\n  }\r\n\r\n  .MuiInput-underline::before {\r\n    border-bottom: 2px solid ${t => t.theme.colorP1} !important;\r\n  }\r\n\r\n  .MuiInput-underline::after {\r\n    border-bottom: 2px solid ${t => t.theme.colorP1} !important;\r\n  }\r\n`;\r\n\r\nconst Background = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: -1;\r\n  background-color: ${(t) => t.theme.colorBG0};\r\n  background-size: 20px 20px;\r\n`;\r\n\r\nfunction MainComponent({ theme, loadTweets }: Props) {\r\n  useEffect(() => {\r\n    loadTweets();\r\n  }, [loadTweets]);\r\n\r\n  return (\r\n    <HashRouter basename=\"/\">\r\n      <ThemeProvider theme={theme}>\r\n        <Background />\r\n        <Global />\r\n        <NavigationList />\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <Home />\r\n          </Route>\r\n          <Route path=\"/dashboard\" exact>\r\n            <Dashboard />\r\n          </Route>\r\n          <Route path=\"/about\" exact>\r\n            <About />\r\n          </Route>\r\n          <Route path=\"/settings\" exact>\r\n            <Settings />\r\n          </Route>\r\n          <Route path=\"/post/:id\" exact>\r\n            <PostAnalysis />\r\n          </Route>\r\n        </Switch>\r\n      </ThemeProvider>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps: Dispatch = {\r\n  loadTweets: LoadTweetsAction.create,\r\n};\r\ntype Dispatch = {\r\n  loadTweets(): void;\r\n};\r\n\r\nfunction mapStateToProps(state: GlobalState) {\r\n  return {\r\n    theme: state.style.theme,\r\n  };\r\n}\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\r\n\r\nconst Main = connect(mapStateToProps, mapDispatchToProps)(MainComponent);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Main />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}